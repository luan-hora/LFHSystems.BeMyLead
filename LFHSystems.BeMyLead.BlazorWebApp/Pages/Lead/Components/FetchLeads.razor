@page "/FetchLeads"
@using LFHSystems.BeMyLead.BlazorWebApp.Data.Lead;
@using static System.Net.WebRequestMethods;
@inject LeadService leadService;
@inject HttpClient Http;
@inject IConfiguration _config;

<PageTitle>Leads</PageTitle>

<h1>Leads</h1>

<p>This component demonstrates fetching data from a service.</p>

<div class="row">
    <div class="col-md-6">
        <a href='/lead/create' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Lead
        </a>
    </div>   
</div>

@if (leads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                @*<th>Wants announces?</th>
                <th>Privacy Policy?</th>*@
                <th>Creation Date</th>
                <th>Last Updated Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in leads)
            {
                <tr>
                    <td>@client.ID</td>
                    <td>@client.Name</td>
                    <td>@client.Email</td>
                    <td>@client.PhoneNumber</td>
                    <td>@client.WantsToReceiveAnnounces</td>
                    @*<td>@client.PrivacyPolicy</td>
                    <td>@client.CreationDate</td>*@
                    <td>@client.LastUpdatedDate</td>
                    <td>
                        <a href="/lead/edit/@client.ID" role="button" class="btn btn-outline-dark">
                            Edit
                        </a>
                        <a href='/lead/delete/@client.ID' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Lead[]? leads;
    private List<Lead> searchLeads = new();
    protected Lead lead = new();
    protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {   
        leads = await Http.GetFromJsonAsync<Lead[]>($"{_config.GetSection("ApiAddresses:WebApiBeMyLead").Value}/Lead/GetExistingLeads");
        searchLeads = leads?.ToList() ?? new();
    }

    protected void FilterUser()
    {
        if (!string.IsNullOrEmpty(SearchString))
        {
            leads = searchLeads
                .Where(x => x.Name.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
                .ToArray();
        }
        else
        {
            leads = searchLeads.ToArray();
        }
    }
    protected void DeleteConfirm(int leadId)
    {
        lead = leads?.FirstOrDefault(x => x.ID == leadId) ?? new();
    }
}
